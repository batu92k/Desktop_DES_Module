<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="lock_PctBx.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>